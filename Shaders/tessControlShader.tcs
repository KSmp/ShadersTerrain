#version 450 core
layout (vertices = 3) out;

float GetTessLevel(float dist1, float dist2);


in vec3 posVS[];
in vec2 texCoordsVS[];

out vec3 posTC[];
out vec2 texCoordsTC[];

uniform vec3 viewPos;

void main()
{
   if (gl_InvocationID==0)
   {
		// Calculate the tessellation levels

        float cameraToVertexDist0 = distance(viewPos, posVS[0]);
        float cameraToVertexDist1 = distance(viewPos, posVS[1]);
        float cameraToVertexDist2 = distance(viewPos, posVS[2]);

        gl_TessLevelOuter[0] = GetTessLevel(cameraToVertexDist1, cameraToVertexDist2);
        gl_TessLevelOuter[1] = GetTessLevel(cameraToVertexDist2, cameraToVertexDist0);
        gl_TessLevelOuter[2] = GetTessLevel(cameraToVertexDist0, cameraToVertexDist1);

        gl_TessLevelInner[0] = gl_TessLevelOuter[2];
   }

   posTC[gl_InvocationID]  = posVS[gl_InvocationID] ;
   texCoordsTC[gl_InvocationID] = texCoordsVS[gl_InvocationID];
}

float GetTessLevel(float dist1, float dist2) {
    float avg = (dist1 + dist2) / 2.0;

    if (avg < 100) {
     return 32;
    } else if (avg < 150) {
        return 16;
    } else if (avg < 200) {
        return 8;
    } else if (avg < 500) {
        return 4;
    } 

    //
    //float a = -1.5;
    //float b = 500;
    //
    //float result = a * avg + b;
    //    
    //if (result > 1.0) {
    //    return result;
    //}

    return 1;
}