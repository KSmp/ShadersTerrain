#version 450 core

// reading in a triangle, split tesselated triangels evenly in a counter-clockwise direction (ccw)
layout(triangles, equal_spacing, ccw) in;

// forward declare functions to perfrom interpolation with the barycentric coordinates from the Primitive Generator
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;

float hash(float n);
float snoise(vec3 x);
float noise(vec3 position, int octaves);

// unifrom matrices to perform transformations
// previously this would have been done in vertex shader
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform sampler2D heightMap;
uniform float scale;
uniform vec3 viewPos;
uniform vec4 plane;

// read in vector arrays from previous shader
in vec3 posTC[] ;
in vec2 texCoordsTC[];
// in vec3 normTC[] ;

// pass along the interpolated values
out vec3 normES ;
out vec3 posES ;
out vec2 texCoordsES;
out float visibility;


void main()
{

    // interpolate the normal and xyz position using the linear interpolation function
    // use 3D because they are in three dimensions; 2D also included for uv texture coordinates

   // normES = interpolate3D(normTC[0], normTC[1], normTC[2]) ;
   posES = interpolate3D(posTC[0], posTC[1], posTC[2]) ;
   texCoordsES = interpolate2D(texCoordsTC[0], texCoordsTC[1], texCoordsTC[2]);

   float height = texture(heightMap, texCoordsES).x;
   //posES.y = height * scale;
   posES.y = noise(posES, 100) - 70;

   float right = (textureOffset(heightMap, texCoordsES, ivec2(1, 0)).x) * scale;
   float left = (textureOffset(heightMap, texCoordsES, ivec2(-1, 0)).x) * scale;
   float up = (textureOffset(heightMap, texCoordsES, ivec2(0, 1)).x) * scale;
   float down = (textureOffset(heightMap, texCoordsES, ivec2(0, -1)).x) * scale;

   float lr = left - right;
   float ud = up - down;

   normES = normalize(vec3(lr, 2.0, ud));

   // fog

   float distanceFromCamera = distance(viewPos, posES);
   visibility = exp(-pow((distanceFromCamera * 0.004), 1.2));
   visibility = clamp(visibility, 0.0, 1.0);

   // transform vertex to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader

	gl_ClipDistance[0] = dot(vec4(posES, 1.0), plane);
	gl_Position = projection * view * model * vec4(posES, 1.0);
} 


//basic linear interpolation
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float hash(float n) {
    return fract(sin(n) * 753.5453123);
}

float snoise(vec3 x)
{
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = f * f * (3.0f - (2.0f * f));

	float n = p.x + p.y * 157.0f + 113.0f * p.z;
	return mix(mix(mix(hash(n + 0.0f), hash(n + 1.0f), f.x),
		mix(hash(n + 157.0f), hash(n + 158.0f), f.x), f.y),
		mix(mix(hash(n + 113.0f), hash(n + 114.0f), f.x),
			mix(hash(n + 270.0f), hash(n + 271.0f), f.x), f.y), f.z);
}

float noise(vec3 position, int octaves) {
	float total = 0.f;
	float frequency = 0.005;
	float maxAmplitude = 0.f;
	float amplitude = 100.f;

	for (int i = 0; i < octaves; i++) {
		total += snoise(position * frequency) * amplitude;
		frequency *= 2.f;
		amplitude /= 2.f;
		maxAmplitude += amplitude;
	}

	return (total / maxAmplitude) * scale;
}
